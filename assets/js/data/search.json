[ { "title": "Azure and Jekyll", "url": "/posts/azurejekyll/", "categories": "Blogging, Tutorial", "tags": "Github, Jekyll, Azure", "date": "2022-06-25 12:00:00 -0400", "snippet": "Static Site with Azure and JekyllAzure and JekyllAzureJekyllSay you want to use a Static webpage for work or really just want to understand how to set it up with SSO so that you can put some authen...", "content": "Static Site with Azure and JekyllAzure and JekyllAzureJekyllSay you want to use a Static webpage for work or really just want to understand how to set it up with SSO so that you can put some authentication in front of your site. In this we will be using Azure Static web Apps with Jekyll and using Azure AD as the IDP.Jekyll Install DependenciesHead on over to the Jekyll website and check out install guide, its rather simple and quick to create your scaffolding for your static website. You can also check out my post here. gem install bundler jekyll jekyll new my-awesome-site cd my-awesome-site bundle exec jekyll serveNow browse to http://localhost:4000Figure out what code repoistory your going to use, I would recommend Github. Microsoft is moving over to this anyway so ADO / Azure DevOps is old news. Create your repoistory and upload all the files in the directory that Jekyll create.Azure Static Web AppsNow that you have your scaffolding, lets head on over to Azure.You will want to do a search for Static web apps. Static web appsDuring this process we will setup Static web apps to pull from our repo and build out and host the website.Once you have the page for Static web apps open..Azure App registrationNow lets go a create a app registration for the IDPTest your Build" }, { "title": "The BIG Migration from Vmware to Proxmox", "url": "/posts/vmwareproxmox/", "categories": "Homelab, Tutorial", "tags": "Vmware, Proxmox", "date": "2022-06-20 12:00:00 -0400", "snippet": "The MigrationWhile Vmware was really good for my homelab it was getting to be an effort. I used Vmware’s Vmug program to test out different vmware products like NSX, vRA, and ESXI products. We are ...", "content": "The MigrationWhile Vmware was really good for my homelab it was getting to be an effort. I used Vmware’s Vmug program to test out different vmware products like NSX, vRA, and ESXI products. We are a big VMware shop at work and I wanted to test out building and breaking things without the VMware Admins getting mad at me. I set out to automate and deploy Windows and linux servers with a front end website to request builds following up with something that could enforce configuration changes like puppet. This worked great for my homelab for a good 5 years but it was getting old paying the subscription fee for vmug and having to find specific hardware or modify the boot config to deploy ESXI on hardware I had around the house. We also had the solution deployed at work so the need to figure out how it all works together was done plus I was over being restricted around server hardware. Time for a switch….In comes ProxmoxSo were off on a mission to migrate over to proxmox, I can’t use the already running Vmware environment as I have servers running on both ESXI hosts and the memory is maxed out. Time to test out building a new server with hardware I wanted.PCPartPicker Part List Type Item CPU AMD Ryzen 9 5900X 3.7 GHz 12-Core Processor CPU Cooler Corsair H100x 57.2 CFM Liquid CPU Cooler Motherboard Asus TUF GAMING X570-PLUS (WI-FI) ATX AM4 Motherboard Memory Corsair Vengeance LPX 128 GB (4 x 32 GB) DDR4-3600 CL18 Memory Storage Samsung 850 Evo 250 GB 2.5\" Solid State Drive Storage Samsung 870 Evo 1 TB 2.5\" Solid State Drive Storage Samsung 870 Evo 1 TB 2.5\" Solid State Drive Storage Seagate Barracuda Compute 2 TB 3.5\" 7200RPM Internal Hard Drive Case Corsair 4000D Airflow ATX Mid Tower Case Power Supply Corsair RM (2021) 850 W 80+ Gold Certified Fully Modular ATX Power Supply Wired Network Adapter Intel E1G42ETBLK 2 x Gigabit Ethernet PCIe x4 Network Adapter Wired Network Adapter Intel E1G42ETBLK 2 x Gigabit Ethernet PCIe x4 Network Adapter Install of ProxmoxProxmox was more or less a straight forward of a install. I did run into a few issues with the motherboard I bought. For some reason the first bootup it required a GPU even though it had built in HDMI. Good thing I had my daughter’s old pc still around and I was able to pull the old GPU from it and start the boot process in to the bios to turn on SVM for virtualization and install proxmox.I started off grabing the latest Proxmox VE ISOProxmox ISOProxmox has great documentation, Im not even going to try go over all of it but if you follow this guide you should be just fine.Proxmox InstallI downloaded the ISO file and use a great program to write the ISO to a USB drive.EtcherThe hard drive setup would be as the following using ZFS.850 EVO 250gb - Proxmox install850 EVO 1TB - Virtual machines 850 EVO 1TB - Virtual machinesSeagate 2TB - VM Templates, Containers, Container TemplatesI also have a DS920+ that I use for all my other backups. So it made sense to store any templates, ISO , and Image backups here. This was done by just creating a SMB/CIFS share in proxmox.So far so good. I created my first windows and Ubuntu Server templates. Setup backups jobs and recreated a few easy virtual machines I had running on the old ESXI hosts. I have a few that I need to move over but I wanted to try out the conversion process listed below. I need to save that for another weekend when I can migrate and move the old Vmware servers into the Proxmox Datacenter.Migration of servers to Proxmox VESo far the setup is running great. IO delay is really low and overall performance has been most excellent! LinksVmwareProxmox" }, { "title": "CI/CD", "url": "/posts/cicd/", "categories": "Blogging, Tutorial", "tags": "Github, Azure, AWS, CI/CD", "date": "2022-06-20 12:00:00 -0400", "snippet": "CI/CD and RepoAzureDevOPSGithub", "content": "CI/CD and RepoAzureDevOPSGithub" }, { "title": "AWS Amplify and HUGO", "url": "/posts/awshugo/", "categories": "Blogging, Tutorial", "tags": "Github, HUGO, AWS", "date": "2022-06-20 12:00:00 -0400", "snippet": "Static Site with Hugo and AWS AmplifyAWS Amplify and HUGOAWS AmplifyHUGO)Hugo Install Dependencies", "content": "Static Site with Hugo and AWS AmplifyAWS Amplify and HUGOAWS AmplifyHUGO)Hugo Install Dependencies" }, { "title": "First Post! Jekyll and Github Pages", "url": "/posts/First-Post/", "categories": "Blogging, Tutorial", "tags": "Jekyll, Github, HUGO, AWS, Azure", "date": "2022-06-18 12:00:00 -0400", "snippet": "Static Site with Jekyll and Github Pages Best way for me to learn is by just start doing it.This project started because I was looking to solve a problem at work with a documentation site. Thus do...", "content": "Static Site with Jekyll and Github Pages Best way for me to learn is by just start doing it.This project started because I was looking to solve a problem at work with a documentation site. Thus down the rabbit hole this project was created.I was looking at Hugo and Jekyll for an easy to host static webpage. Seemed straight forward enough , I have used gitbooks before and it wasnt much different. The goal was to create a document site that was only available to a internal CIDR range. We also needed to have a code repostory for version control and community contribution. I wanted to have this all in a CI/CD pipeline so that when someone made and update to documentation it redployed the site with the updated changes.The site was just going to have a basic processes design to get someone new up and going, or where to look for xyz. I really didnt want to deal with authentication as it might be used by people without an account. Most of the people contributing to the site would be part of the technical team so learning markdown shouldn’t be an issue. Templates would be made and instructions on how to clone the repo and update would be created.CI/CD and RepoGithubJekyll and Github PagesJekyllGithub pagesJekyll Install Dependencies Homebrew InstallHomebrew - if you dont have this you should$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Jekyll Dependencies Installs Installing this with a M1 Mac is a little… well a pain in the ass. It will require a few different commands to update things. Ill write up more on this later. Install chruby and ruby-install with Homebrewbrew install chruby ruby-install Install the latest stable version of Rubyruby-install ruby Check which shell your using with the command - echo $SHELL Configure your Shell (.zshrc) to use chrubyecho \"source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh\" &gt;&gt; ~/.zshrcecho \"source $(brew --prefix)/opt/chruby/share/chruby/auto.sh\" &gt;&gt; ~/.zshrcecho \"chruby ruby-3.1.1\" &gt;&gt; ~/.zshrc Configure your Shell (.bash_profile) to use chrubyecho \"source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh\" &gt;&gt; ~/.bash_profileecho \"source $(brew --prefix)/opt/chruby/share/chruby/auto.sh\" &gt;&gt; ~/.bash_profileecho \"chruby ruby-3.1.1\" &gt;&gt; ~/.bash_profile Quit and relaunch Terminal to make sure everything is working.ruby -v Jekyll Installgem install jekyll Build your first siteCreating a new site only has a few simple steps. This will create a site at ./mysitejekyll new mysiteGo into the directory that was created.cd mysiteBuild the site and launch it locallybundle exec jekyll serveIf everything goes correctly you should be able to see your site at http://localhost:4000Github PagesSo now that you have your Jekyll Site created lets host it. I used github for my repositories, so were going to use github action and github pages for hosting the site.Copy all the files from the directory that Jekyll created when you made a new site. Dont worry about adding content yet. lets just make sure we can get the site deployed first.inside the repo for the Jekyll site go into settings. Then click on the pages tab.For the Source pick the master branch and click save. This should start the process of deploying your jekyll site to github pages. If you want to add a custom domain create 4 A records for the following ip address in your domain registrar or hosting provider.185.199.108.153185.199.109.153185.199.110.153185.199.111.153Once you click save on the pages tab you should be able to switch over to the Actions tab at the top of the repo and see the site start building.Once completed you should see your sites url in the github page settings. If you didnt use a custom domain it may look something like Your site is ready to be published at https://yourgithub.github.io/site/Once you verify everything is working, you can now use your IDE to clone and make updates. Each time you update your repo github pages will redeploy the site with the updated changes." } ]
